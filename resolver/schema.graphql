type Query {
    trapezzaSession(rest: String!, table: String!): TrapezzaSession
    trapezzaSessionByID(id: String!): TrapezzaSession
}

type Mutation {
    newTrapezzaSession(rest: String!, table: String!): String!
    endTrapezzaSession(rest: String!, table: String!): Boolean!
    endTrapezzaSessionByID(id: String!): Boolean!
    changeWaiter(trapezza: String!, waiter: String!): Boolean!
    changePayer(trapezza: String!, payer: String!): Boolean!
    newGroupOrder(trapezza: String!, payer: String!): Boolean!
    joinGroupOrder(trapezza: String!, client: String!, payer: String!): Boolean!
    addItems(trapezza: String!, client: String!, items: [String!]): Boolean!
    removeItem(trapezza: String!, client: String!, item: String!): Boolean!
    splitItem(trapezza: String!, who: String!, with: String!, item: String!): Boolean!
    checkoutPayer(trapezza: String!, payer: String!): Boolean!
    checkoutClient(trapezza: String!, client: String!): Boolean!
    waiterCall(trapezza: String!, client: String!, message: String!): Boolean!
    waiterCallAnswer(trapezza: String!, client: String!, waiter: String!): Boolean!
}

type Subscription {
    trapezzaSessionUpdates(id: String!): TrapezzaSessionUpdate
    restaurantEvents(id: String!): RestaurantEvents
}

type TrapezzaSessionUpdate {
    state: TrapezzaSession
    event: TrapezzaSessionEvents
}

type TrapezzaSession {
    id: String!
    waiter: String!
    started: Time!
    lastCall: Time!
    groups: [GroupOrder]
}

type GroupOrder {
    payer: String!
    orders: [ClientOrder]
    total: Float!
}

type ClientOrder {
    client: String!
    items: [OrderItem]
    calls: [Call]
    checkedOut: Boolean!
}

type OrderItem {
    id: String!
    price: Float!
    groups: [GroupOrder]
}

type Item {
    id: String!
    price: Float!
}

type Call {
    time: Time!
    message: String!
}

type NewTrapezzaSession {
    table: String!
    trapezza: String!
}

type EndTrapezzaSession {
    table: String!
    trapezza: String!
}

type ChangeWaiter {
    waiter: String!
}

type ChangePayer {
    payer: String!
}

type NewGroupOrder {
    payer: String!
}

type AddItems {
    client: String!
    items: [Item]
}

type RemoveItem {
    client: String!
    item: String!
}

type SplitItem {
    who: String!
    with: String!
    item: String!
}

type JoinGroupOrder {
    payer: String!
    client: String!
}

type CheckoutClient {
    client: String!
}

type CheckoutPayer {
    payer: String!
}

type WaiterCall {
    client: String!
    message: String!
}

type WaiterCallAnswer {
    waiter: String!
}

union TrapezzaSessionEvents = WaiterCall | CheckoutPayer | CheckoutClient | JoinGroupOrder | SplitItem | RemoveItem
    | AddItems | NewGroupOrder | ChangePayer | ChangeWaiter | WaiterCallAnswer

union RestaurantEvents = NewTrapezzaSession | EndTrapezzaSession

scalar Time